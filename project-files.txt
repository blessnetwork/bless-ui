===== src/app/settings/page.tsx =====
import React from 'react'
import { MainLayout } from '@/components/main-layout'

;('use client')

export default function SettingsPage() {
	return (
		<MainLayout>
			<h1 className="text-lg font-bold">Settings Page</h1>
			<p>This is the settings page content.</p>
		</MainLayout>
	)
}
===== src/app/documentation/page.tsx =====
import React from 'react'
import { MainLayout } from '@/components/main-layout'

;('use client')

export default function DocumentationPage() {
	return (
		<MainLayout>
			<h1 className="text-lg font-bold">Documentation Page</h1>
			<p>This is the documentation page content.</p>
		</MainLayout>
	)
}
===== src/app/my-nodes/page.tsx =====
'use client'

import React from 'react'
import { MainLayout } from '@/components/main-layout'
import { CardWrapper } from '@/components/ui/card'
import { ChartContainer } from '@/components/ui/chart'
import { Bar, BarChart, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts'

// Static JSON Data
const chartData = [
	{ day: '2025-03-01', 'Referral Time': 120, 'Bonus Time': 80, 'Base Time': 60 },
	{ day: '2025-03-02', 'Referral Time': 130, 'Bonus Time': 90, 'Base Time': 70 },
	{ day: '2025-03-03', 'Referral Time': 150, 'Bonus Time': 100, 'Base Time': 75 },
	{ day: '2025-03-04', 'Referral Time': 160, 'Bonus Time': 110, 'Base Time': 80 },
	{ day: '2025-03-05', 'Referral Time': 140, 'Bonus Time': 95, 'Base Time': 70 },
	{ day: '2025-03-06', 'Referral Time': 155, 'Bonus Time': 105, 'Base Time': 78 },
	{ day: '2025-03-07', 'Referral Time': 170, 'Bonus Time': 120, 'Base Time': 85 },
	{ day: '2025-03-08', 'Referral Time': 180, 'Bonus Time': 130, 'Base Time': 90 },
	{ day: '2025-03-09', 'Referral Time': 190, 'Bonus Time': 140, 'Base Time': 95 },
	{ day: '2025-03-10', 'Referral Time': 200, 'Bonus Time': 150, 'Base Time': 100 },
	{ day: '2025-03-11', 'Referral Time': 210, 'Bonus Time': 160, 'Base Time': 110 },
	{ day: '2025-03-12', 'Referral Time': 220, 'Bonus Time': 170, 'Base Time': 115 },
	{ day: '2025-03-13', 'Referral Time': 230, 'Bonus Time': 180, 'Base Time': 120 },
	{ day: '2025-03-14', 'Referral Time': 240, 'Bonus Time': 190, 'Base Time': 125 },
	{ day: '2025-03-15', 'Referral Time': 250, 'Bonus Time': 200, 'Base Time': 130 },
	{ day: '2025-03-16', 'Referral Time': 260, 'Bonus Time': 210, 'Base Time': 140 }
]

// Chart Configuration
const chartConfig = {
	// 'Referral Time': { color: '#c3bef7' }, // Blue (Bottom)
	'Referral Time': { color: '#FFFFFF' }, // Blue (Bottom)
	'Bonus Time': { color: '#16463d' }, //
	'Base Time': { color: '#8dd081' } // Red (Top)
}

export default function MyNodesPage() {
	return (
		<MainLayout>
			{/* Chart Section */}
			<CardWrapper className="mt-6 w-full max-w-4xl">
				<ChartContainer config={chartConfig}>
					<ResponsiveContainer width="100%" height={368}>
						<BarChart data={chartData} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>
							<XAxis dataKey="day" />
							<YAxis />
							<Tooltip />
							<Legend />
							<Bar dataKey="Base Time" stackId="a" fill="#c3bef7" />
							<Bar dataKey="Bonus Time" stackId="a" fill="#16463d" />
							<Bar dataKey="Referral Time" stackId="a" fill="#8dd081" />
						</BarChart>
					</ResponsiveContainer>
				</ChartContainer>
			</CardWrapper>
		</MainLayout>
	)
}
===== src/app/airdrops/page.tsx =====
import React from 'react'
import { MainLayout } from '@/components/main-layout'

;('use client')

export default function AirdropsPage() {
	return (
		<MainLayout>
			<h1 className="text-lg font-bold">Airdrops Page</h1>
			<p>This is the airdrops page content.</p>
		</MainLayout>
	)
}
===== src/app/referrals/page.tsx =====
import React from 'react'
import { MainLayout } from '@/components/main-layout'

;('use client')

export default function ReferralsPage() {
	return (
		<MainLayout>
			<h1 className="text-lg font-bold">Referrals Page</h1>
			<p>This is the referrals page content.</p>
		</MainLayout>
	)
}
===== src/app/logout/page.tsx =====
import React from 'react'
import { MainLayout } from '@/components/main-layout'

;('use client')

export default function LogoutPage() {
	return (
		<MainLayout>
			<h1 className="text-lg font-bold">Logout Page</h1>
			<p>This is the logout page content.</p>
		</MainLayout>
	)
}
===== src/app/components/page.tsx =====
'use client'

import {
	AirdropsIcon,
	Button,
	Card,
	CardSection,
	Chart,
	ChartBar,
	DocumentationIcon,
	Header,
	HeaderMobile,
	HomeIcon,
	Input,
	LogoIcon,
	LogoutIcon,
	MenuIcon,
	MyNodesIcon,
	OrchestrationNodeIcon,
	Popover,
	ReferralsIcon,
	SettingsIcon,
	StakingIcon
} from '@salsaflavio/my-ui-components'

export default function Page() {
	return (
		<main className="space-y-8 bg-gray-400 p-8">
			<Button className="bg-pink-500 text-white">Click Me</Button>
			<Card title="My Card">
				<CardSection title="Section 1">Hello World</CardSection>
			</Card>
			<Chart />
			<ChartBar />
			<Header />
			<HeaderMobile />
			<Input placeholder="Type something..." />
			<Popover trigger={<Button>Open Popover</Button>}>Popover content</Popover>

			<div className="grid grid-cols-4 gap-4 text-blue-600">
				<HomeIcon className="h-6 w-6" />
				<MyNodesIcon className="h-6 w-6" />
				<StakingIcon className="h-6 w-6" />
				<AirdropsIcon className="h-6 w-6" />
				<OrchestrationNodeIcon className="h-6 w-6" />
				<SettingsIcon className="h-6 w-6" />
				<ReferralsIcon className="h-6 w-6" />
				<DocumentationIcon className="h-6 w-6" />
				<LogoutIcon className="h-6 w-6" />
				<MenuIcon className="h-6 w-6" />
				<LogoIcon className="h-8 w-8" />
			</div>
		</main>
	)
}
===== src/app/staking/page.tsx =====
import React from 'react'
import { MainLayout } from '@/components/main-layout'

;('use client')

export default function StakingPage() {
	return (
		<MainLayout>
			<h1 className="text-lg font-bold">Staking Page</h1>
			<p>This is the staking page content.</p>
		</MainLayout>
	)
}
===== src/app/layout.tsx =====
import React from 'react'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import '@/styles/globals.css'

const inter = Inter({
	subsets: ['latin'],
	weight: ['300', '400', '500', '700'],
	variable: '--font-inter',
	display: 'swap'
})

export const metadata: Metadata = {
	title: 'Bless UI',
	description: 'A React UI component library.'
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
	return (
		<html lang="en" className={inter.className}>
			<head />
			<body className={`${inter.variable} min-h-screen w-full font-sans`}>{children}</body>
		</html>
	)
}
===== src/app/orchestration/page.tsx =====
import React from 'react'
import { MainLayout } from '@/components/main-layout'

;('use client')

export default function OrchestrationPage() {
	return (
		<MainLayout>
			<h1 className="text-lg font-bold">Orchestration Page</h1>
			<p>This is the orchestration page content.</p>
		</MainLayout>
	)
}
===== src/app/page.tsx =====
import React from 'react'
import { MainLayout } from '@/components/main-layout'
import CardSection, { CardData } from '@/components/ui/card-section'

export interface CardSectionProps {
	cards: CardData[]
	cardType?: string
}

export default function HomePage() {
	const section1Cards: CardData[] = [
		{
			title: 'Card 1',
			description: 'Description 1',
			content: 'This is the main content of card 1.',
			footer: <p>Footer content 1</p>
		},
		{
			title: 'Card 2',
			description: 'Description 2',
			content: 'This is the main content of card 2.',
			footer: <p>Footer content 2</p>
		},
		{
			title: 'Card 3',
			description: 'Description 3',
			content: 'This is the main content of card 3.',
			footer: <p>Footer content 3</p>
		}
	]

	const section2Cards: CardData[] = [
		{
			title: 'Full Width Card',
			description: 'This card stretches across the entire width of the content area',
			content: 'This is the main content of the full-width card.',
			footer: <p>Footer content for the full-width card</p>
		}
	]

	const section3Cards: CardData[] = [
		{
			title: 'Two Column Card 1',
			description: 'This is the first card in the two-column layout',
			content: 'This is the main content of the first two-column card.',
			footer: <p>Footer for card 1</p>
		},
		{
			title: 'Two Column Card 2',
			description: 'This is the second card in the two-column layout',
			content: 'This is the main content of the second two-column card.',
			footer: <p>Footer for card 2</p>
		}
	]

	const section4Cards: CardData[] = [
		{
			title: 'Four Column Card 1',
			description: 'First card in four-column layout',
			content: 'Content for the first card in the four-column section.',
			footer: <p>Footer for card 1</p>
		},
		{
			title: 'Four Column Card 2',
			description: 'Second card in four-column layout',
			content: 'Content for the second card in the four-column section.',
			footer: <p>Footer for card 2</p>
		},
		{
			title: 'Four Column Card 3',
			description: 'Third card in four-column layout',
			content: 'Content for the third card in the four-column section.',
			footer: <p>Footer for card 3</p>
		},
		{
			title: 'Four Column Card 4',
			description: 'Fourth card in four-column layout',
			content: 'Content for the fourth card in the four-column section.',
			footer: <p>Footer for card 4</p>
		}
	]
	return (
		<MainLayout>
			<CardSection cards={section1Cards} cardType="Card" />
			<CardSection cards={section2Cards} cardType="Card" className="mt-4" />
			<CardSection cards={section3Cards} cardType="Card" className="mt-4" />
			<CardSection cards={section4Cards} cardType="Card" className="mt-4" />
		</MainLayout>
	)
}
===== src/constants/menu-items.tsx =====
import React from 'react'
import {
	AirdropsIcon,
	DocumentationIcon,
	HomeIcon,
	LogoutIcon,
	MyNodesIcon,
	OrchestrationNodeIcon,
	ReferralsIcon,
	SettingsIcon,
	StakingIcon
} from '@/components/ui/icons'

;('use client')

const iconClasses = (isActive: boolean) => {
	return `w-[18px] h-[18px] text-[13px] ${
		isActive ? 'text-black' : 'text-[#A0A2A0] group-hover:text-black'
	}`
}

const menuItems = [
	{
		label: 'Home',
		path: '/',
		icon: (isActive: boolean) => <HomeIcon className={iconClasses(isActive)} />
	},
	{
		label: 'My Nodes',
		path: '/my-nodes',
		icon: (isActive: boolean) => <MyNodesIcon className={iconClasses(isActive)} />
	},
	{
		label: 'Staking',
		path: '/staking',
		icon: (isActive: boolean) => <StakingIcon className={iconClasses(isActive)} />
	},
	{
		label: 'Airdrops',
		path: '/airdrops',
		icon: (isActive: boolean) => <AirdropsIcon className={iconClasses(isActive)} />
	},
	{
		label: 'Orchestration Node',
		path: '/orchestration',
		icon: (isActive: boolean) => <OrchestrationNodeIcon className={iconClasses(isActive)} />
	}
]

const menuItemsFooter = [
	{
		label: 'Settings',
		path: '/settings',
		icon: (isActive: boolean) => <SettingsIcon className={iconClasses(isActive)} />
	},
	{
		label: 'Referrals',
		path: '/referrals',
		icon: (isActive: boolean) => <ReferralsIcon className={iconClasses(isActive)} />
	},
	{
		label: 'Documentation',
		path: '/documentation',
		icon: (isActive: boolean) => <DocumentationIcon className={iconClasses(isActive)} />
	},
	{
		label: 'Logout',
		path: '/logout',
		icon: (isActive: boolean) => <LogoutIcon className={iconClasses(isActive)} />
	}
]

export { menuItems, menuItemsFooter }
===== src/state/useSidenavStore.ts =====
import { create } from 'zustand'

interface SidenavState {
	device: 'mobile' | 'tablet' | 'desktop'
	isExpanded: boolean
	width: number
	setDevice: (device: 'mobile' | 'tablet' | 'desktop') => void
	toggleSidenav: () => void
}

export const useSidenavStore = create<SidenavState>((set) => ({
	device: 'desktop',
	isExpanded: true,
	width: 260,

	setDevice: (device) => {
		const newState = {
			device,
			isExpanded: device === 'desktop',
			width: device === 'mobile' ? 0 : device === 'tablet' ? 72 : 260
		}
		console.log('📢 Updated Sidenav State:', newState)
		set(newState)
	},

	toggleSidenav: () => {
		set((state) => {
			const newState = {
				...state,
				isExpanded: !state.isExpanded,
				width: state.isExpanded ? (state.device === 'mobile' ? 0 : 72) : 260
			}
			console.log('📢 Toggled Sidenav State:', newState)
			return newState
		})
	}
}))
===== src/README.md =====
# Bless UI

A React UI component library.

## Docs

- https://blocklessnetwork.github.io/bless-ui
===== src/components/ui/side-nav.tsx =====
import React, { useEffect, useMemo, useState } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { LogoIcon, MenuIcon } from '@/components/ui/icons'
import { useSidenavStore } from '@/state/useSidenavStore'

interface MenuItem {
	label: string
	path: string
	icon: (isActive: boolean) => JSX.Element
}

interface SideNavProps {
	menuItems: MenuItem[]
	menuItemsFooter: MenuItem[]
}

const SideNav: React.FC<SideNavProps> = ({ menuItems, menuItemsFooter }) => {
	const pathname = usePathname()
	const [activePath, setActivePath] = useState<string>(pathname)
	const { isExpanded, width, toggleSidenav } = useSidenavStore()

	useEffect(() => {
		setActivePath(pathname)
	}, [pathname])

	const renderMenuItem = useMemo(
		() =>
			(item: MenuItem, isFooter: boolean = false) => {
				const isActive = activePath === item.path
				return (
					<li key={item.path} onClick={() => setActivePath(item.path)}>
						<Link href={item.path}>
							<div
								className={`group flex h-9 items-center gap-3 rounded-lg px-5 ${
									isActive
										? 'bg-white text-black shadow-md'
										: 'text-[#A0A2A0] hover:bg-[#E5E5E5] hover:shadow-md'
								}`}
							>
								{item.icon(isActive)}
								<span
									className={`ml-3 text-sm transition-opacity ${
										isExpanded ? 'opacity-100' : 'hidden opacity-0'
									}`}
								>
									{item.label}
								</span>
							</div>
						</Link>
					</li>
				)
			},
		[activePath, isExpanded, setActivePath]
	)

	return (
		<nav
			id="sidenav"
			className="bg-background-sidenav flex min-h-screen flex-col transition-all duration-300"
			style={{ width }}
		>
			<header
				id="sidebar_header"
				className="flex h-[74px] items-center bg-gray-300 px-4 py-3 shadow-md"
			>
				<div
					className={`transition-opacity duration-300 ${
						isExpanded ? 'opacity-100' : 'hidden opacity-0'
					}`}
				>
					<LogoIcon className="h-8 w-8" />
				</div>
				<button onClick={toggleSidenav} className="ml-auto rounded p-1 transition-all duration-200">
					<MenuIcon
						className={`h-6 w-6 cursor-pointer text-[#A0A2A0] transition-transform duration-100 hover:text-black ${
							isExpanded ? 'rotate-0' : 'rotate-180'
						}`}
					/>
				</button>
			</header>

			<ul className="flex-grow space-y-1 px-2 py-4">
				{menuItems.map((item) => renderMenuItem(item))}
			</ul>

			<div className="mt-auto p-2">
				<ul className="space-y-1">{menuItemsFooter.map((item) => renderMenuItem(item, true))}</ul>
			</div>
		</nav>
	)
}

export default SideNav
===== src/components/ui/card.tsx =====
import * as React from 'react'
import { cn } from '@/lib/utils'

const CardWrapper = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
	({ className, ...props }, ref) => (
		<div
			ref={ref}
			className={cn(
				'text-card-foreground rounded-xl bg-white shadow-md outline outline-1 outline-stone-950/5',
				className
			)}
			{...props}
		/>
	)
)
CardWrapper.displayName = 'CardWrapper'

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
	({ className, ...props }, ref) => (
		<div ref={ref} className={cn('flex flex-col space-y-1.5 p-6', className)} {...props} />
	)
)
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
	({ className, ...props }, ref) => (
		<div
			ref={ref}
			className={cn('text-2xl font-semibold leading-none tracking-tight', className)}
			{...props}
		/>
	)
)
CardTitle.displayName = 'CardTitle'

const CardDescription = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
	({ className, ...props }, ref) => (
		<div ref={ref} className={cn('text-muted-foreground text-sm', className)} {...props} />
	)
)
CardDescription.displayName = 'CardDescription'

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
	({ className, ...props }, ref) => (
		<div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
	)
)
CardContent.displayName = 'CardContent'

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
	({ className, ...props }, ref) => (
		<div ref={ref} className={cn('flex items-center p-6 pt-0', className)} {...props} />
	)
)
CardFooter.displayName = 'CardFooter'

interface CardProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'title'> {
	title?: React.ReactNode
	description?: React.ReactNode
	footer?: React.ReactNode
	height?: string | number
}

const Card: React.FC<CardProps> = ({
	className,
	title,
	description,
	children,
	footer,
	height,
	...props
}) => {
	return (
		<CardWrapper
			className={cn(
				'w-full flex-1 sm:w-[calc(50%-0.5rem)] lg:w-[calc(33.333%-0.667rem)]',
				height && (typeof height === 'number' ? `h-[${height}px]` : height),
				className
			)}
			{...props}
		>
			<CardHeader>
				{title && <CardTitle>{title}</CardTitle>}
				{description && <CardDescription>{description}</CardDescription>}
			</CardHeader>
			<CardContent>{children}</CardContent>
			{footer && <CardFooter>{footer}</CardFooter>}
		</CardWrapper>
	)
}

const CardAchievement: React.FC<CardProps> = ({
	className,
	title,
	description,
	children,
	footer,
	height,
	...props
}) => {
	return (
		<CardWrapper
			className={cn(
				'w-full flex-1 sm:w-[calc(50%-0.5rem)] lg:w-[calc(33.333%-0.667rem)]',
				height && (typeof height === 'number' ? `h-[${height}px]` : height),
				className
			)}
			{...props}
		>
			<CardContent>{children}</CardContent>
			<CardFooter>
				{title && <CardTitle>{title}</CardTitle>}
				{description && <CardDescription>{description}</CardDescription>}
				<button>Circle Icon Plus Button</button>
			</CardFooter>
		</CardWrapper>
	)
}

export {
	CardWrapper,
	CardHeader,
	CardTitle,
	CardDescription,
	CardContent,
	CardFooter,
	CardAchievement
}
export default Card
===== src/components/ui/popover.tsx =====
import React from 'react'

interface PopoverProps {
	label: string
	children: React.ReactNode
	show?: boolean
}

const Popover: React.FC<PopoverProps> = ({ label, children, show = false }) => {
	return (
		<div className="group relative">
			{children}
			{show && (
				<div className="absolute left-12 top-1/2 -translate-y-1/2 transform rounded bg-black px-2 py-1 text-xs text-[#FFFFFF] opacity-0 transition-opacity duration-200 group-hover:opacity-100">
					{label}
				</div>
			)}
		</div>
	)
}

export default Popover
===== src/components/ui/card-section.tsx =====
import React from 'react'
import Card, { CardAchievement } from '@/components/ui/card'

export type CardData = {
	title: string
	description: string
	content: string
	footer: React.ReactNode
}

interface CardSectionProps {
	cards: CardData[]
	cardType: 'Card' | 'CardAchievement' // Ensure cardType is defined
	className?: string
}

const CardSection: React.FC<CardSectionProps> = ({ cards, cardType, className = '' }) => {
	const gridClass =
		cards.length === 1 ? 'w-full' : cards.length === 2 ? 'sm:w-1/2' : 'sm:w-1/3 lg:w-1/4'

	const CardComponent = cardType === 'Card' ? Card : CardAchievement // Select card component dynamically

	return (
		<div className={`flex flex-col flex-wrap gap-4 sm:flex-row ${className}`}>
			{cards.slice(0, 4).map((card, index) => (
				<CardComponent
					key={index}
					title={card.title}
					description={card.description}
					footer={card.footer}
					className={gridClass}
				>
					<p>{card.content}</p>
				</CardComponent>
			))}
		</div>
	)
}

export default CardSection
===== src/components/ui/header-mobile.tsx =====
import React from 'react'

export default function HeaderMobile() {
	return (
		<header className="flex">
			<div className="flex-1">
				<span className="font-bold text-white">Bless</span>
				<span className="font-bold text-white">Online</span>
			</div>
			<div className="flex-shrink-0">
				<button className="font-bold text-white">Menu</button>
			</div>
		</header>
	)
}
===== src/components/ui/chart.tsx =====
'use client'

import * as React from 'react'
import * as RechartsPrimitive from 'recharts'
import { cn } from '@/lib/utils'

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: '', dark: '.dark' } as const

export type ChartConfig = {
	[k in string]: {
		label?: React.ReactNode
		icon?: React.ComponentType
	} & (
		| { color?: string; theme?: never }
		| { color?: never; theme: Record<keyof typeof THEMES, string> }
	)
}

type ChartContextProps = {
	config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
	const context = React.useContext(ChartContext)

	if (!context) {
		throw new Error('useChart must be used within a <ChartContainer />')
	}

	return context
}

const ChartContainer = React.forwardRef<
	HTMLDivElement,
	React.ComponentProps<'div'> & {
		config: ChartConfig
		children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children']
	}
>(({ id, className, children, config, ...props }, ref) => {
	const uniqueId = React.useId()
	const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`

	return (
		<ChartContext.Provider value={{ config }}>
			<div
				data-chart={chartId}
				ref={ref}
				className={cn(
					"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
					className
				)}
				{...props}
			>
				<ChartStyle id={chartId} config={config} />
				<RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>
			</div>
		</ChartContext.Provider>
	)
})
ChartContainer.displayName = 'Chart'

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
	const colorConfig = Object.entries(config).filter(([_, config]) => config.theme || config.color)

	if (!colorConfig.length) {
		return null
	}

	return (
		<style
			dangerouslySetInnerHTML={{
				__html: Object.entries(THEMES)
					.map(
						([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
	.map(([key, itemConfig]) => {
		const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color
		return color ? `  --color-${key}: ${color};` : null
	})
	.join('\n')}
}
`
					)
					.join('\n')
			}}
		/>
	)
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
	HTMLDivElement,
	React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
		React.ComponentProps<'div'> & {
			hideLabel?: boolean
			hideIndicator?: boolean
			indicator?: 'line' | 'dot' | 'dashed'
			nameKey?: string
			labelKey?: string
		}
>(
	(
		{
			active,
			payload,
			className,
			indicator = 'dot',
			hideLabel = false,
			hideIndicator = false,
			label,
			labelFormatter,
			labelClassName,
			formatter,
			color,
			nameKey,
			labelKey
		},
		ref
	) => {
		const { config } = useChart()

		const tooltipLabel = React.useMemo(() => {
			if (hideLabel || !payload?.length) {
				return null
			}

			const [item] = payload
			const key = `${labelKey || item.dataKey || item.name || 'value'}`
			const itemConfig = getPayloadConfigFromPayload(config, item, key)
			const value =
				!labelKey && typeof label === 'string'
					? config[label as keyof typeof config]?.label || label
					: itemConfig?.label

			if (labelFormatter) {
				return (
					<div className={cn('font-medium', labelClassName)}>{labelFormatter(value, payload)}</div>
				)
			}

			if (!value) {
				return null
			}

			return <div className={cn('font-medium', labelClassName)}>{value}</div>
		}, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey])

		if (!active || !payload?.length) {
			return null
		}

		const nestLabel = payload.length === 1 && indicator !== 'dot'

		return (
			<div
				ref={ref}
				className={cn(
					'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',
					className
				)}
			>
				{!nestLabel ? tooltipLabel : null}
				<div className="grid gap-1.5">
					{payload.map((item, index) => {
						const key = `${nameKey || item.name || item.dataKey || 'value'}`
						const itemConfig = getPayloadConfigFromPayload(config, item, key)
						const indicatorColor = color || item.payload.fill || item.color

						return (
							<div
								key={item.dataKey}
								className={cn(
									'[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',
									indicator === 'dot' && 'items-center'
								)}
							>
								{formatter && item?.value !== undefined && item.name ? (
									formatter(item.value, item.name, item, index, item.payload)
								) : (
									<>
										{itemConfig?.icon ? (
											<itemConfig.icon />
										) : (
											!hideIndicator && (
												<div
													className={cn(
														'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',
														{
															'h-2.5 w-2.5': indicator === 'dot',
															'w-1': indicator === 'line',
															'w-0 border-[1.5px] border-dashed bg-transparent':
																indicator === 'dashed',
															'my-0.5': nestLabel && indicator === 'dashed'
														}
													)}
													style={
														{
															'--color-bg': indicatorColor,
															'--color-border': indicatorColor
														} as React.CSSProperties
													}
												/>
											)
										)}
										<div
											className={cn(
												'flex flex-1 justify-between leading-none',
												nestLabel ? 'items-end' : 'items-center'
											)}
										>
											<div className="grid gap-1.5">
												{nestLabel ? tooltipLabel : null}
												<span className="text-muted-foreground">
													{itemConfig?.label || item.name}
												</span>
											</div>
											{item.value && (
												<span className="text-foreground font-mono font-medium tabular-nums">
													{item.value.toLocaleString()}
												</span>
											)}
										</div>
									</>
								)}
							</div>
						)
					})}
				</div>
			</div>
		)
	}
)
ChartTooltipContent.displayName = 'ChartTooltip'

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
	HTMLDivElement,
	React.ComponentProps<'div'> &
		Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {
			hideIcon?: boolean
			nameKey?: string
		}
>(({ className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref) => {
	const { config } = useChart()

	if (!payload?.length) {
		return null
	}

	return (
		<div
			ref={ref}
			className={cn(
				'flex items-center justify-center gap-4',
				verticalAlign === 'top' ? 'pb-3' : 'pt-3',
				className
			)}
		>
			{payload.map((item) => {
				const key = `${nameKey || item.dataKey || 'value'}`
				const itemConfig = getPayloadConfigFromPayload(config, item, key)

				return (
					<div
						key={item.value}
						className={cn(
							'[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3'
						)}
					>
						{itemConfig?.icon && !hideIcon ? (
							<itemConfig.icon />
						) : (
							<div
								className="h-2 w-2 shrink-0 rounded-[2px]"
								style={{
									backgroundColor: item.color
								}}
							/>
						)}
						{itemConfig?.label}
					</div>
				)
			})}
		</div>
	)
})
ChartLegendContent.displayName = 'ChartLegend'

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {
	if (typeof payload !== 'object' || payload === null) {
		return undefined
	}

	const payloadPayload =
		'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null
			? payload.payload
			: undefined

	let configLabelKey: string = key

	if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {
		configLabelKey = payload[key as keyof typeof payload] as string
	} else if (
		payloadPayload &&
		key in payloadPayload &&
		typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'
	) {
		configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string
	}

	return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config]
}

export {
	ChartContainer,
	ChartTooltip,
	ChartTooltipContent,
	ChartLegend,
	ChartLegendContent,
	ChartStyle
}
===== src/components/ui/icons.tsx =====
import React from 'react'

interface IconProps {
	className?: string
}

const HomeIcon: React.FC<IconProps> = ({ className = '' }) => (
	<svg
		width="18"
		height="18"
		viewBox="0 0 18 18"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
		className={className}
	>
		<path
			d="M3.145 6.19998L8.395 2.20998C8.753 1.93798 9.248 1.93798 9.605 2.20998L14.855 6.19998C15.104 6.38898 15.25 6.68398 15.25 6.99598V14.25C15.25 15.355 14.355 16.25 13.25 16.25H4.75C3.645 16.25 2.75 15.355 2.75 14.25V6.99598C2.75 6.68298 2.896 6.38898 3.145 6.19998Z"
			stroke="currentColor"
			strokeWidth="1.5"
			strokeLinecap="round"
			strokeLinejoin="round"
		/>
	</svg>
)

const MyNodesIcon: React.FC<IconProps> = ({ className = '' }) => (
	<svg
		width="18"
		height="18"
		viewBox="0 0 18 18"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
		className={className}
	>
		<path
			d="M5 15.25C6.24264 15.25 7.25 14.2426 7.25 13C7.25 11.7574 6.24264 10.75 5 10.75C3.75736 10.75 2.75 11.7574 2.75 13C2.75 14.2426 3.75736 15.25 5 15.25Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M13 7.25C14.2426 7.25 15.25 6.24264 15.25 5C15.25 3.75736 14.2426 2.75 13 2.75C11.7574 2.75 10.75 3.75736 10.75 5C10.75 6.24264 11.7574 7.25 13 7.25Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M13 15.25C14.2426 15.25 15.25 14.2426 15.25 13C15.25 11.7574 14.2426 10.75 13 10.75C11.7574 10.75 10.75 11.7574 10.75 13C10.75 14.2426 11.7574 15.25 13 15.25Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M5 7.25C6.24264 7.25 7.25 6.24264 7.25 5C7.25 3.75736 6.24264 2.75 5 2.75C3.75736 2.75 2.75 3.75736 2.75 5C2.75 6.24264 3.75736 7.25 5 7.25Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M6.5907 11.4093L11.4095 6.59052"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
	</svg>
)

const StakingIcon: React.FC<IconProps> = ({ className = '' }) => (
	<svg
		width="18"
		height="18"
		viewBox="0 0 18 18"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
		className={className}
	>
		<path
			d="M6 12.155C3.579 11.688 1.75 9.558 1.75 7C1.75 4.101 4.101 1.75 7 1.75C8.917 1.75 10.595 2.778 11.511 4.313"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M14.25 10.25H9.75C9.19772 10.25 8.75 10.6977 8.75 11.25V12.25C8.75 12.8023 9.19772 13.25 9.75 13.25H14.25C14.8023 13.25 15.25 12.8023 15.25 12.25V11.25C15.25 10.6977 14.8023 10.25 14.25 10.25Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M15.25 7.25H10.75C10.1977 7.25 9.75 7.69772 9.75 8.25V9.25C9.75 9.80228 10.1977 10.25 10.75 10.25H15.25C15.8023 10.25 16.25 9.80228 16.25 9.25V8.25C16.25 7.69772 15.8023 7.25 15.25 7.25Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M15.25 13.25H10.75C10.1977 13.25 9.75 13.6977 9.75 14.25V15.25C9.75 15.8023 10.1977 16.25 10.75 16.25H15.25C15.8023 16.25 16.25 15.8023 16.25 15.25V14.25C16.25 13.6977 15.8023 13.25 15.25 13.25Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M7 4V7L4.5 8.5"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
	</svg>
)

const AirdropsIcon: React.FC<IconProps> = ({ className = '' }) => (
	<svg
		width="18"
		height="18"
		viewBox="0 0 18 18"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
		className={className}
	>
		<path
			d="M9.25 14.75H6.75V16.25H9.25V14.75Z"
			fill="currentColor"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M15.452 5.52C15.228 4.369 14.217 3.5 13 3.5C11.619 3.5 10.5 4.619 10.5 6C9.672 6 9 6.672 9 7.5C9 8.328 9.672 9 10.5 9H15.25C16.216 9 17 8.217 17 7.25C17 6.353 16.322 5.622 15.452 5.52Z"
			fill="currentColor"
		/>
		<path
			d="M10.749 2.411C9.936 1.983 8.99 1.75 8 1.75C5.218 1.75 2.75 3.562 2.75 6.523C2.75 9.484 5.9 12.25 5.9 12.25H10.1C10.1 12.25 10.76 11.664 11.475 10.75"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
	</svg>
)

const OrchestrationNodeIcon: React.FC<IconProps> = ({ className = '' }) => (
	<svg
		width="18"
		height="18"
		viewBox="0 0 18 18"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
		className={className}
	>
		<path
			d="M2.83997 8.68892C3.08597 7.25192 3.82197 5.98192 4.87097 5.05792"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M15.1599 8.68892C14.9139 7.25192 14.1779 5.98192 13.1289 5.05792"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M11 15.6729C10.372 15.8849 9.699 15.9999 9 15.9999C8.301 15.9999 7.628 15.8849 7 15.6729"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M9 5.74994C10.1046 5.74994 11 4.85451 11 3.74994C11 2.64537 10.1046 1.74994 9 1.74994C7.89543 1.74994 7 2.64537 7 3.74994C7 4.85451 7.89543 5.74994 9 5.74994Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M3.80395 14.7499C4.90852 14.7499 5.80396 13.8545 5.80396 12.7499C5.80396 11.6454 4.90852 10.7499 3.80395 10.7499C2.69939 10.7499 1.80396 11.6454 1.80396 12.7499C1.80396 13.8545 2.69939 14.7499 3.80395 14.7499Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M14.1959 14.7499C15.3005 14.7499 16.1959 13.8545 16.1959 12.7499C16.1959 11.6454 15.3005 10.7499 14.1959 10.7499C13.0914 10.7499 12.1959 11.6454 12.1959 12.7499C12.1959 13.8545 13.0914 14.7499 14.1959 14.7499Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
	</svg>
)

const SettingsIcon: React.FC<IconProps> = ({ className = '' }) => (
	<svg
		width="18"
		height="18"
		viewBox="0 0 18 18"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
		className={className}
	>
		<path
			d="M9 10.749C9.9665 10.749 10.75 9.96552 10.75 8.99902C10.75 8.03252 9.9665 7.24902 9 7.24902C8.0335 7.24902 7.25 8.03252 7.25 8.99902C7.25 9.96552 8.0335 10.749 9 10.749Z"
			fill="currentColor"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M15.175 7.27806L14.246 6.95006C14.144 6.68906 14.027 6.43006 13.883 6.18006C13.739 5.93006 13.573 5.70006 13.398 5.48106L13.578 4.51306C13.703 3.84206 13.391 3.16406 12.8 2.82306L12.449 2.62006C11.857 2.27806 11.115 2.34706 10.596 2.79106L9.851 3.42806C9.291 3.34206 8.718 3.34206 8.148 3.42806L7.403 2.79006C6.884 2.34606 6.141 2.27706 5.55 2.61906L5.199 2.82206C4.607 3.16306 4.296 3.84106 4.421 4.51206L4.601 5.47706C4.241 5.92606 3.955 6.42306 3.749 6.95106L2.825 7.27706C2.181 7.50406 1.75 8.11306 1.75 8.79606V9.20106C1.75 9.88406 2.181 10.4931 2.825 10.7201L3.754 11.0481C3.856 11.3091 3.972 11.5671 4.117 11.8171C4.262 12.0671 4.427 12.2971 4.602 12.5171L4.421 13.4851C4.296 14.1561 4.608 14.8341 5.199 15.1751L5.55 15.3781C6.142 15.7201 6.884 15.6511 7.403 15.2071L8.148 14.5691C8.707 14.6551 9.28 14.6551 9.849 14.5691L10.595 15.2081C11.114 15.6521 11.857 15.7211 12.448 15.3791L12.799 15.1761C13.391 14.8341 13.702 14.1571 13.577 13.4861L13.397 12.5201C13.756 12.0711 14.043 11.5751 14.248 11.0471L15.173 10.7211C15.817 10.4941 16.248 9.88506 16.248 9.20206V8.79706C16.248 8.11406 15.817 7.50506 15.173 7.27806H15.175Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
	</svg>
)

const ReferralsIcon: React.FC<IconProps> = ({ className = '' }) => (
	<svg
		width="18"
		height="18"
		viewBox="0 0 18 18"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
		className={className}
	>
		<path
			d="M9 7.25C10.5188 7.25 11.75 6.01878 11.75 4.5C11.75 2.98122 10.5188 1.75 9 1.75C7.48122 1.75 6.25 2.98122 6.25 4.5C6.25 6.01878 7.48122 7.25 9 7.25Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M14.25 10.25L11.75 12.75L14.25 15.25"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M10.911 10.054C10.308 9.86 9.66799 9.75 8.99999 9.75C6.44899 9.75 4.26099 11.28 3.29099 13.47C2.92599 14.295 3.37799 15.244 4.23799 15.515C5.46299 15.901 7.08399 16.249 8.99999 16.249C9.90799 16.249 10.744 16.167 11.509 16.043"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M11.75 12.75H16.75"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
	</svg>
)

const DocumentationIcon: React.FC<IconProps> = ({ className = '' }) => (
	<svg
		width="18"
		height="18"
		viewBox="0 0 18 18"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
		className={className}
	>
		<path
			d="M9 12.75C10.5188 12.75 11.75 11.5188 11.75 10C11.75 8.48122 10.5188 7.25 9 7.25C7.48122 7.25 6.25 8.48122 6.25 10C6.25 11.5188 7.48122 12.75 9 12.75Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M11.09 12.09L15.25 16.25"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M15.25 16.25V6.6644C15.25 6.3991 15.1446 6.1446 14.957 5.957L11.0427 2.0427C10.8553 1.8553 10.601 1.75 10.336 1.75H4.75C3.6454 1.75 2.75 2.6454 2.75 3.75V14.25C2.75 15.3546 3.6454 16.25 4.75 16.25H11.25"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
	</svg>
)

const LogoutIcon: React.FC<IconProps> = ({ className = '' }) => (
	<svg
		width="18"
		height="18"
		viewBox="0 0 18 18"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
		className={className}
	>
		<path
			d="M9.25 16V2.00001C9.25 1.64301 8.887 1.40101 8.558 1.53801L3.865 3.49401C3.492 3.64901 3.25 4.01301 3.25 4.41701V13.583C3.25 13.987 3.493 14.351 3.865 14.506L8.557 16.461C8.886 16.598 9.249 16.356 9.249 15.999L9.25 16Z"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M11.75 3.25H13.75C14.302 3.25 14.75 3.698 14.75 4.25V13.75C14.75 14.302 14.302 14.75 13.75 14.75H11.75"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
		<path
			d="M6.75 8.5V9.5"
			stroke="currentColor"
			stroke-width="1.5"
			stroke-linecap="round"
			stroke-linejoin="round"
		/>
	</svg>
)

const MenuIcon: React.FC<IconProps & { onClick?: () => void }> = ({ className = '', onClick }) => (
	<svg
		width="18"
		height="18"
		viewBox="0 0 18 18"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
		className={className}
		onClick={onClick}
	>
		<path d="M6.25 2.75V15.25" stroke="currentColor" strokeWidth="1.5" />
		<path d="M12.25 6.5L9.75 9L12.25 11.5" stroke="currentColor" strokeWidth="1.5" />
		<path
			d="M3.75 15.25L14.25 15.25C15.3546 15.25 16.25 14.3546 16.25 13.25V4.75C16.25 3.64543 15.3546 2.75 14.25 2.75L3.75 2.75C2.64543 2.75 1.75 3.64543 1.75 4.75V13.25C1.75 14.3546 2.64543 15.25 3.75 15.25Z"
			stroke="currentColor"
			strokeWidth="1.5"
		/>
	</svg>
)

const LogoIcon: React.FC<IconProps & { onClick?: () => void }> = ({ className = '', onClick }) => (
	<svg
		width="32"
		height="32"
		viewBox="0 0 32 32"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
		className={className}
		onClick={onClick}
	>
		<mask id="mask0_1_399" maskUnits="userSpaceOnUse" x="5" y="0" width="23" height="32">
			<path d="M27.12 0H5.12V32H27.12V0Z" fill="white" />
		</mask>
		<g mask="url(#mask0_1_399)">
			<path
				d="M15.9746 15.7916L10.6131 10.4471C10.5887 10.4228 10.5493 10.4228 10.525 10.4471L5.16339 15.7916C5.13906 15.8158 5.13906 15.8551 5.16339 15.8794L10.525 21.2238C10.5493 21.248 10.5887 21.248 10.6131 21.2238L15.9746 15.8794C15.999 15.8551 15.999 15.8158 15.9746 15.7916Z"
				fill="#0D0F0D"
			/>
			<path
				d="M27.0765 26.522L21.7148 21.1776C21.6906 21.1533 21.6512 21.1533 21.6268 21.1776L16.2652 26.522C16.2409 26.5462 16.2409 26.5856 16.2652 26.6099L21.6268 31.9542C21.6512 31.9785 21.6906 31.9785 21.7148 31.9542L27.0765 26.6099C27.1008 26.5856 27.1008 26.5462 27.0765 26.522Z"
				fill="#0D0F0D"
			/>
			<path
				d="M10.5713 22.4711H10.5697C8.11867 22.4711 6.13171 24.4516 6.13171 26.8949V26.8965C6.13171 29.3397 8.11867 31.3204 10.5697 31.3204H10.5713C13.0224 31.3204 15.0093 29.3397 15.0093 26.8965V26.8949C15.0093 24.4516 13.0224 22.4711 10.5713 22.4711Z"
				fill="#0D0F0D"
			/>
			<path
				d="M10.5713 0H10.5697C8.11867 0 6.13171 1.9806 6.13171 4.4238V4.42544C6.13171 6.86863 8.11867 8.84922 10.5697 8.84922H10.5713C13.0224 8.84922 15.0093 6.86863 15.0093 4.42544V4.4238C15.0093 1.9806 13.0224 0 10.5713 0Z"
				fill="#0D0F0D"
			/>
			<path
				d="M21.6688 11.0809H21.6671C19.216 11.0809 17.2291 13.0614 17.2291 15.5046V15.5062C17.2291 17.9495 19.216 19.9301 21.6671 19.9301H21.6688C24.1197 19.9301 26.1067 17.9495 26.1067 15.5062V15.5046C26.1067 13.0614 24.1197 11.0809 21.6688 11.0809Z"
				fill="#0D0F0D"
			/>
		</g>
	</svg>
)

export {
	HomeIcon,
	MyNodesIcon,
	StakingIcon,
	AirdropsIcon,
	OrchestrationNodeIcon,
	SettingsIcon,
	ReferralsIcon,
	DocumentationIcon,
	LogoutIcon,
	MenuIcon,
	LogoIcon
}
===== src/components/ui/header.tsx =====
import React from 'react'

const Header: React.FC = () => {
	return (
		<header className="flex w-full items-center justify-between bg-[#ff8200] p-4">
			<span className="font-bold text-white">Bless</span>
			<span className="font-bold text-white">Online</span>
		</header>
	)
}

export default Header
===== src/components/ui/button.tsx =====
import React from 'react'

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
	children: React.ReactNode
	className?: string
}

const Button: React.FC<ButtonProps> = ({ children, className = '', ...props }) => {
	return React.createElement(
		'button',
		{
			className: `rounded-full bg-gray transition ~text-sm/xl ~px-4/8 ~py-2/4 ${className}`,
			...props
		},
		children
	)
}

export default Button
===== src/components/ui/input.tsx =====
import * as React from 'react'
import { cn } from '@/lib/utils'

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
	({ className, type, ...props }, ref) => {
		return (
			<input
				type={type}
				className={cn(
					`shadow-inner-slate border-input bg-slate ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring my-4 box-border flex h-[78px] w-full rounded-full border px-8 py-2 text-xl focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50`,
					className
				)}
				ref={ref}
				{...props}
			/>
		)
	}
)
Input.displayName = 'Input'

export default Input
===== src/components/ui/chart-bar.tsx =====
'use client'

import React from 'react'
import { ChartContainer } from '@/components/ui/chart'
import { Bar, BarChart, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts'

// Static JSON Data
const chartData = [
	{ day: '2025-03-01', 'Referral Time': 120, 'Bonus Time': 80, 'Base Time': 60 },
	{ day: '2025-03-02', 'Referral Time': 130, 'Bonus Time': 90, 'Base Time': 70 },
	{ day: '2025-03-03', 'Referral Time': 150, 'Bonus Time': 100, 'Base Time': 75 },
	{ day: '2025-03-04', 'Referral Time': 160, 'Bonus Time': 110, 'Base Time': 80 },
	{ day: '2025-03-05', 'Referral Time': 140, 'Bonus Time': 95, 'Base Time': 70 },
	{ day: '2025-03-06', 'Referral Time': 155, 'Bonus Time': 105, 'Base Time': 78 },
	{ day: '2025-03-07', 'Referral Time': 170, 'Bonus Time': 120, 'Base Time': 85 },
	{ day: '2025-03-08', 'Referral Time': 180, 'Bonus Time': 130, 'Base Time': 90 },
	{ day: '2025-03-09', 'Referral Time': 190, 'Bonus Time': 140, 'Base Time': 95 },
	{ day: '2025-03-10', 'Referral Time': 200, 'Bonus Time': 150, 'Base Time': 100 },
	{ day: '2025-03-11', 'Referral Time': 210, 'Bonus Time': 160, 'Base Time': 110 },
	{ day: '2025-03-12', 'Referral Time': 220, 'Bonus Time': 170, 'Base Time': 115 },
	{ day: '2025-03-13', 'Referral Time': 230, 'Bonus Time': 180, 'Base Time': 120 },
	{ day: '2025-03-14', 'Referral Time': 240, 'Bonus Time': 190, 'Base Time': 125 },
	{ day: '2025-03-15', 'Referral Time': 250, 'Bonus Time': 200, 'Base Time': 130 },
	{ day: '2025-03-16', 'Referral Time': 260, 'Bonus Time': 210, 'Base Time': 140 }
]

// Chart Configuration
const chartConfig = {
	'Referral Time': { color: '#FFFFFF' }, // White
	'Bonus Time': { color: '#16463d' }, // Greenish
	'Base Time': { color: '#8dd081' } // Light Green
}

const ChartBar: React.FC = () => {
	return (
		<div className="mt-6 w-full max-w-4xl">
			<ChartContainer config={chartConfig}>
				<ResponsiveContainer width="100%" height={400}>
					<BarChart data={chartData} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>
						<XAxis dataKey="day" />
						<YAxis />
						<Tooltip />
						<Legend />
						<Bar dataKey="Base Time" stackId="a" fill="#8dd081" />
						<Bar dataKey="Bonus Time" stackId="a" fill="#16463d" />
						<Bar dataKey="Referral Time" stackId="a" fill="#FFFFFF" />
					</BarChart>
				</ResponsiveContainer>
			</ChartContainer>
		</div>
	)
}

export default ChartBar
===== src/components/main-layout.tsx =====
'use client'

import React from 'react'
import SideNav from '@/components/ui/side-nav'
import { menuItems, menuItemsFooter } from '@/constants/menu-items'
import useSidenav from '@/hooks/useSidenav'
import { useSidenavStore } from '@/state/useSidenavStore'

const HEADER_HEIGHT = 'h-[74px]'

interface MainLayoutProps {
	children: React.ReactNode
}

const MainLayout: React.FC<MainLayoutProps> = ({ children }) => {
	useSidenav()
	const { width } = useSidenavStore()

	return (
		<div id="mainLayoutWrapper" className="flex min-h-screen w-full">
			<SideNav menuItems={menuItems} menuItemsFooter={menuItemsFooter} />
			<div
				id="mainLayoutContent"
				className="flex flex-1 flex-col transition-all duration-300"
				style={{ width: `calc(100% - ${width}px)` }}
			>
				<header className={`flex ${HEADER_HEIGHT} items-center justify-between p-4 shadow-md`}>
					<h1 className="font-bold text-black">Bless</h1>
					<p className="font-bold text-black">Online</p>
				</header>
				<main className={`flex-1 p-4`}>{children}</main>
			</div>
		</div>
	)
}

export { MainLayout }
export default MainLayout
===== src/hooks/useSidenav.ts =====
import { useEffect } from 'react'
import { useSidenavStore } from '@/state/useSidenavStore'

const useSidenav = () => {
	const { setDevice } = useSidenavStore()

	useEffect(() => {
		const handleResize = () => {
			const width = window.innerWidth

			if (width <= 640) {
				setDevice('mobile')
			} else if (width > 640 && width <= 1024) {
				setDevice('tablet')
			} else {
				setDevice('desktop')
			}
		}

		handleResize()
		window.addEventListener('resize', handleResize)
		return () => window.removeEventListener('resize', handleResize)
	}, [setDevice])
}

export default useSidenav
===== src/lib/utils.ts =====
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs))
}
===== src/index.ts =====
// src/index.ts

// Core UI components
export { default as Button } from './components/ui/button'
export * from './components/ui/button'

export { default as Card } from './components/ui/card'
export * from './components/ui/card'

export { default as CardSection } from './components/ui/card-section'
export * from './components/ui/card-section'

export { default as Input } from './components/ui/input'
export * from './components/ui/input'

export { default as Popover } from './components/ui/popover'
export * from './components/ui/popover'

// Misc UI elements
export { default as Header } from './components/ui/header'
export * from './components/ui/header'

export { default as HeaderMobile } from './components/ui/header-mobile'
export * from './components/ui/header-mobile'

// Icon exports
export * as Icons from './components/ui/icons'

// Chart utilities
export * from './components/ui/chart'

// Layout
export { default as SideNav } from './components/ui/side-nav'
export * from './components/ui/side-nav'

export { default as MainLayout } from './components/main-layout'
export * from './components/main-layout'
